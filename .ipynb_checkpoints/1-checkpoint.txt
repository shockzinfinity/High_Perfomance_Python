주요성능지표: instruction per cycle, cycle per second

하이퍼스레딩: 두 스레드 섞어서 서로 다른 실행 유닛 실행
비순차실행: 대기할 떄 다른 연산 실행 사용 가능한 자원 최대한 활용
멀티코어 아키텍처: 하나의 실행 유닛에 여러개의 cpu를 둠
 - 암달의 법칙 때문에 하나의 코어에서 실행되어야 하는 루틴이 존재하여 최대 성능 지점에 도달하면 더이상 증가하지 못함

파이썬은 global interpreter lock때문에 무조건 하나의 코어만 실행!
=> 해결하기 위해 multiprocessing, nunmexpr, cython

---

FSB는 L1/L2 캐시와 RAM을 연결
캐시와 CPU사이는 훨씬 빠름
외부 버스는 일반적으로 fsb보다 느림

GPU는 PCI bus로 연결 되어 있음 - 매우 느림

bus의 속성 - 버스 폭(한번에 전송할 수 있는 데이터 양), 버스 주파수(초당 몇 번 전송)
칩을 가깝게 배치 -> 주파수 증가
연결하는 선의 수 증가 -> 폭 증가

---

파이썬이 느린 이유
1. 파이썬 객체가 메모리에 최적화 되어있지 않음 - Garbage Collector
2. 파이썬은 동적타입을 사용 컴파일 x -> cython
3. GIL - 오직 1코어

파이썬을 쓰는 이유
1. 포현력이 좋고 배우기 쉬움
2. 라이브러리 활용 - scikit-learn, numpy 등은 c 코드만큼 빠르게 작동
3. api, 데이터베이스 바인딩이 쉽다.
